package org.jetbrains.sampler.pw


import com.intellij.ui.ScrollPaneFactory
import com.intellij.ui.components.JBLabel
import com.intellij.ui.components.JBList
import com.intellij.ui.components.JBScrollPane
import com.intellij.uiDesigner.core.GridConstraints
import com.intellij.uiDesigner.core.GridLayoutManager
import com.test.SampleDescription
import java.awt.Dimension
import java.awt.Insets
import javax.swing.JComponent
import javax.swing.JPanel
import javax.swing.JSeparator
import javax.swing.JTextPane

class SamplerTemplateList(items: List<SampleDescription>) {
    val mainPanel: JPanel = JPanel()
    private val list1: JBList<SampleDescription> = JBList()
    private val listPanel: JPanel = JPanel()
    private val descriptionPane: JTextPane = JTextPane()

    val selectedTemplate: SampleDescription?
        get() = list1.selectedValue

    init {
        list1.model = JBList.createDefaultListModel(items)
        `$$$setupUI$$$`()

        listPanel.add(ScrollPaneFactory.createScrollPane(list1),
                GridConstraints(0, 0, 1, 1,
                        GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false))

        list1.addListSelectionListener { listSelectionEvent ->
            val template = selectedTemplate
            if (template != null) {
                descriptionPane.text = template.readme
                descriptionPane.caretPosition = 0
            }
        }
    }

    private fun createUIComponents() {}

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private fun `$$$setupUI$$$`() {
        val scrollPane1 = JBScrollPane()
        mainPanel.apply {
            layout = GridLayoutManager(3, 3, Insets(0, 0, 0, 0), -1, -1)
            minimumSize = Dimension(400, 200)
            val separator1 = JSeparator()
            add(separator1, GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false))
            add(JBLabel("Description"), GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false))
            add(scrollPane1, GridConstraints(1, 1, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false))
        }
        descriptionPane.apply {
            //            contentType = "text/html"
            minimumSize = Dimension(200, 200)
            preferredSize = Dimension(200, 250)
            isRequestFocusEnabled = true
            autoscrolls = false
        }
        scrollPane1.setViewportView(descriptionPane)
        listPanel.layout = GridLayoutManager(1, 1, Insets(0, 0, 0, 0), -1, -1)
        mainPanel.add(listPanel, GridConstraints(0, 0, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK or GridConstraints.SIZEPOLICY_CAN_GROW, Dimension(150, 200), Dimension(-1, 250), null, 1, false))
    }

    /**
     * @noinspection ALL
     */
    fun `$$$getRootComponent$$$`(): JComponent {
        return mainPanel
    }
}
